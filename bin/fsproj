#!/usr/bin/env perl

use strict;
use warnings;
use threads;
use Thread::Queue;

our $VERSION = 0.03;
our %settings   = ();
our $TQWinID = Thread::Queue->new();
our $TQSS    = Thread::Queue->new();

package Config;
use File::HomeDir;
use POSIX ('setsid');

my $home     = &home();
my $conffile = "$home/.config/FullscreenProj.pl/fsproj.conf";

sub readconf {
    if ( -e $conffile ) {
        open CONFIG, $conffile;
        no strict;
        while (<CONFIG>) {
            chomp;                  
            next if s/^(#.*|\s*)$//;
            ($var, $value) = split(/\s*=\s*/, $_, 2);
            $$var = $value;    
            print "$var $value $$var\n";
        } 
       use strict;
}
    else {
        $regex   = qr/(libflash)|(vlc)|(mplayer)/;
        $timeout = 50;
        &writeconf;
    }
}

sub writeconf {
    mkdir $conffile =~ s/fsproj.conf//r;
    open CONFIG, ">", $conffile;
    print CONFIG '$regex = ' . "\"" 
      . $regex . "\";\n"
      . '$timeout = '
      . $timeout . ";\n";
    close CONFIG;

}

sub daemonize {
    die "Can't chdir to /: $!" unless chdir '/';
    umask 0;
    die "Can't read /dev/null: $!"     unless open STDIN,  '/dev/null';
    die "Can't write to /dev/null: $!" unless open STDOUT, '>/dev/null';
    die "Can't write to /dev/null: $!" unless open STDERR, '>/dev/null';
    die "Can't fork: $!" unless defined( my $pid = fork );
    exit if $pid;
    die "Can't start a new session: $!" unless setsid();
    sleep 1;

#    foreach ( @{ 'Proc::ProcessTable'->new->table; } ) {
#        if ( ( $_->cmndline =~ /perl.*fsproj/ ) and ( $_->pid != $$ ) ) {
#            die 'Another instance is running';
#        }
#    }
#
}

sub FSHelp {
    print <<EOF;

Crazy Fullscreen Detector & Screensaver Disabler
Version: $VERSION;

Copyright (C) 2012, Igor Gritsenko.
=================

Usage: fsproj [some options] <start|stop>

  Actions: 
start          Starts the script, if not started yet, and  sets the specified options.
stop           Stops the script. All parameters will be ignored.

If script runs without action, it suggests that user wanted to start.

  Options:
--help         This help text.
--no-gui       Do not use the GUI (Default).
--gui          Enable WxWidgets GUI.
--timeout sec  Set timeout in seconds.
--disable      Start script only, don't allow anything to do.
--enable       Start script and let him do work (Default).


EOF
    exit;

}

sub ARGVparse {
    &Config::readconf();
    my $GUI     = 0;
    my $state   = 1;
    my $action  = "start";
    if ( defined @ARGV ) {
        $action = pop @ARGV
          if ( $ARGV[-1] eq "start" || $ARGV[-1] eq "stop" );
        while (@ARGV) {
            my $param = shift @ARGV;
            if ( $param =~ s/^--// ) {
                &FSHelp if $param eq "help";
                if ( $param eq "timeout" ) {
                    shift @ARGV;
                    if ( $_ !~ /\d+/ ) {
                        unshift @ARGV, $_;
                        $_= 50;
                    }
                    $timeout = $_;

                    next;
                }
                if ( $param eq "no-gui" ) {
                    $GUI = 0;
                    next;
                }
                if ( $param eq "gui" ) {
                    $GUI = 1;
                    next;
                }

                if ( $param eq "disable" ) {
                    $state = 0;
                    next;
                }
                if ( $param eq "enable" ) {
                    $state = 1;
                    next;
                }

            }

        }
    }
    print $timeout."\n";
}

1;

package Logic;
use Net::DBus;
use Proc::ProcessTable;
$| = 1;
my $ON  = 'xset +dpms';
my $OFF = 'xset -dpms';

sub ScreenSaver {
    my $command;
    foreach ( @{ 'Proc::ProcessTable'->new->table; } ) {
        if ( $_->cmndline =~ /xscreensaver/ ) {
            $command = qq(system "xscreensaver-command -deactivate");
        }

        elsif ( $_->cmndline =~ /kscreensaver/ ) {
            $command =
qq(Net::DBus->session->get_service("org.freedesktop.ScreenSaver")->get_object('/ScreenSaver')->SimulateUserActivity());
        }

        elsif ( $_->cmndline =~ /gnome-screensaver/ ) {
            $command =
qq(Net::DBus->session->get_service("org.gnome.ScreenSaver")->get_object('/')->SimulateUserActivity());
        }
    }
    return sub {
        while (1) {
            if ( $TQSS->pending ) {
                eval $command;
                if ($@) { warn $@; }
            }
            sleep $timeout;
        }

      }
}

sub CheckDPMS {
    my $DPMSPhrase = "DPMS is";
    chomp( my $state =
          ( qx|xset q \| grep "$DPMSPhrase" | =~ s/^\s+$DPMSPhrase\s+//r ) );
    return $state eq "Enabled";
}

sub ProjLoop {
    $regex = qr/(libflash)|(vlc)|(mplayer)/;
    my $DPMSstate = &CheckDPMS;
    my @processes;
    while (1) {
        my ($winid) = $TQWinID->extract( -1, 1 );
        while ( $TQWinID->pending() ) {
            $TQWinID->dequeue();
        }

        while ( !$TQWinID->pending() ) {
            @processes = ();
            foreach ( @{ 'Proc::ProcessTable'->new->table; } ) {
                if ( $_->cmndline =~ /$regex/ ) {
                    push @processes, $_->pid;
                }
            }
            if ( ( qx#xprop -id $winid _NET_WM_PID# =~ s/[^\d]+//r ) ~~
                @processes
                and qx|xprop -id $winid _NET_WM_STATE| =~
                /_NET_WM_STATE_FULLSCREEN/ )
            {
                $TQSS->enqueue(1);
                system $OFF;
            }
            else {
                while ( $TQSS->pending() ) {
                    $TQSS->dequeue();
                }

                system $ON if $DPMSstate;
            }
            sleep $timeout;
        }
    }
}

sub XWinID {
    open XPROP, 'xprop -spy -root _NET_ACTIVE_WINDOW |';
    while (<XPROP>) {
        my $winid = s/.*?\# (.*)/$1/r;
        chomp $winid;
        $TQWinID->enqueue($winid);
    }
}

1;

package FSProj;


$SIG{HUP} = \&Config::readconf;

sub RunMainLoop {
    threads->create( \&Logic::XWinID )->detach();
    threads->create(&Logic::ScreenSaver)->detach();
    threads->create( \&Logic::ProjLoop )->join();

}
&Config::ARGVparse();

#&FSProj::RunMainLoop();
